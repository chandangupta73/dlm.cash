MANUAL API TESTING GUIDE
Investment & Wallet Management System
=====================================

This guide provides step-by-step instructions for testing all major features of the system using Postman. 
Follow the tests in sequence to verify end-to-end functionality.

TABLE OF CONTENTS
=================
1. Setup & Authentication
2. User Registration & Login
3. KYC Submission & Approval
4. Wallet Deposit & Withdrawals
5. Investment Plan Purchase & ROI Credit
6. Referral System & Earnings
7. Transactions History & Filters
8. Admin Panel Operations

PREREQUISITES
=============
- Postman installed
- Django server running on 127.0.0.1:8000
- Database with initial data (investment plans, referral configs)
- Admin user account created
- Admin panel URLs included in main URL configuration

BASE URL: http://127.0.0.1:8000/api/v1

QUICK REFERENCE - ALL WORKING ENDPOINTS:
========================================
Authentication:
- User Registration: http://127.0.0.1:8000/api/v1/auth/register/
- User Login: http://127.0.0.1:8000/api/v1/auth/login/
- User Logout: http://127.0.0.1:8000/api/v1/auth/logout/

KYC:
- Submit KYC: http://127.0.0.1:8000/api/v1/kyc/documents/upload/
- Admin Approve KYC: http://127.0.0.1:8000/api/v1/admin/kyc/{id}/approve/
- Admin Reject KYC: http://127.0.0.1:8000/api/v1/admin/kyc/{id}/reject/

Wallet:
- Get Balance: http://127.0.0.1:8000/api/v1/wallet/balance/
- Create Deposit: http://127.0.0.1:8000/api/v1/deposit-requests/
- Approve Deposit: http://127.0.0.1:8000/api/v1/deposits/approve/{id}/
- Create Withdrawal: http://127.0.0.1:8000/api/v1/withdraw/
- Admin Approve Withdrawal: http://127.0.0.1:8000/api/v1/admin/withdrawals/{id}/approve/

Investment:
- Get Plans: http://127.0.0.1:8000/api/v1/investment/investment-plans/
- Purchase Plan: http://127.0.0.1:8000/api/v1/investment/investments/
- Admin Trigger ROI: http://127.0.0.1:8000/api/v1/admin/investments/trigger-roi/

Referral:
- Get Referral Profile: http://127.0.0.1:8000/api/v1/referrals/profile/
- Get Referral Tree: http://127.0.0.1:8000/api/v1/referrals/tree/
- Admin Create Milestone: http://127.0.0.1:8000/api/v1/admin/referrals/milestones/

Transactions:
- Get Transactions: http://127.0.0.1:8000/api/v1/transactions/

Admin Panel:
- Dashboard Summary: http://127.0.0.1:8000/api/v1/admin/dashboard/summary/
- Users List: http://127.0.0.1:8000/api/v1/admin/users/
- Admin Wallet Credit: http://127.0.0.1:8000/api/v1/admin/wallet/adjust_balance/
- Admin Wallet Debit: http://127.0.0.1:8000/api/v1/admin/wallet/adjust_balance/
- Admin Create Plan: http://127.0.0.1:8000/api/v1/admin/investments/investment-plans/
- Admin Create Announcement: http://127.0.0.1:8000/api/v1/admin/announcements/
- User Announcements: http://127.0.0.1:8000/api/v1/admin/announcements/user/

IMPORTANT: All endpoints below use this base URL. For example:
- User Registration: http://127.0.0.1:8000/auth/register/ → http://127.0.0.1:8000/api/v1/auth/register/
- User Login: http://127.0.0.1:8000/auth/login/ → http://127.0.0.1:8000/api/v1/auth/login/
- Wallet Balance: http://127.0.0.1:8000/wallet/balance/ → http://127.0.0.1:8000/api/v1/wallet/balance/

================================================================================
1. SETUP & AUTHENTICATION
================================================================================

1.1 Create Postman Environment Variables
---------------------------------------
Create a new environment in Postman with these variables:
- base_url: http://127.0.0.1:8000/api/v1
- admin_token: (leave empty, will be filled after admin login)
- user_token: (leave empty, will be filled after user login)
- user_id: (leave empty, will be filled after user registration)
- admin_id: (leave empty, will be filled after admin login)

Note: With this base_url, your endpoints will be:
- User Registration: http://127.0.0.1:8000/auth/register/ → http://127.0.0.1:8000/api/v1/auth/register/
- User Login: http://127.0.0.1:8000/auth/login/ → http://127.0.0.1:8000/api/v1/auth/login/

1.2 Admin Authentication
------------------------
Test Name: Admin Login - Valid Credentials
API Endpoint: http://127.0.0.1:8000/api/v1/auth/login/
HTTP Method: POST
Headers: 
  Content-Type: application/json

Request Body:
{
  "email": "admin@example.com",
  "password": "admin123"
}

Note: If you don't have an admin user, create one first:
1. Go to Django admin: http://127.0.0.1:8000/admin/
2. Create a superuser or set is_staff=True for an existing user
3. Use those credentials for admin authentication

Expected Response: 200 OK
{
  "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "user": {
    "id": "uuid-here",
    "username": "admin",
    "email": "admin@example.com",
    "is_staff": true,
    "is_superuser": true
  }
}

Actions in Postman:
1. Send request
2. Copy the "access" token value
3. Set environment variable: admin_token = [copied token]
4. Set environment variable: admin_id = [user.id from response]


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU1MDA3MDkwLCJpYXQiOjE3NTUwMDM0OTAsImp0aSI6ImFhYjNiNThmYmZjYjRhNTk4YzU1YWY2MTVhMTZhZjEwIiwidXNlcl9pZCI6IjM5M2YxOGQ1LTg4ZmEtNDZiYS1hOWZiLWRmNjZkMDIyMDNhMyJ9.MZnSoW-oH6kOsCcE36vXER14LwTp9WXas_PC6v_loSg

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU1MDA3MjI3LCJpYXQiOjE3NTUwMDM2MjcsImp0aSI6IjY4OGE2Y2E1MzI4MTQ3ZDFhMmZhMjczNzZjY2JlZDI4IiwidXNlcl9pZCI6IjI1OTMwOWVmLTUxM2ItNGYxZi1iNmUxLWUxNzMxZTBmNDZiNiJ9.Ci3NgHH2WgHGldA8RpmWbXw_wZJwUSus6oFBH0PeUQY

1.3 User Authentication
-----------------------
Test Name: User Registration - Valid Data
API Endpoint: http://127.0.0.1:8000/api/v1/auth/register/
HTTP Method: POST
Headers:
  Content-Type: application/json

Request Body:
{
  "username": "testuser1",
  "email": "testuser1@example.com",
  "password": "TestPass123!",
  "password_confirm": "TestPass123!",
  "first_name": "Test",
  "last_name": "User",
  "phone_number": "+919876543210"
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "username": "testuser1",
  "email": "testuser1@example.com",
  "first_name": "Test",
  "last_name": "User",
  "phone_number": "+919876543210",
  "is_kyc_verified": false,
  "kyc_status": "PENDING"
}

Actions in Postman:
1. Send request
2. Set environment variable: user_id = [id from response]

Test Name: User Login - Valid Credentials
API Endpoint: http://127.0.0.1:8000/api/v1/auth/login/
HTTP Method: POST
Headers:
  Content-Type: application/json

Request Body:
{
  "email": "testuser1@example.com",
  "password": "TestPass123!"
}

Expected Response: 200 OK
{
  "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "user": {
    "id": "uuid-here",
    "username": "testuser1",
    "email": "testuser1@example.com"
  }
}

Actions in Postman:
1. Send request
2. Copy the "access" token value
3. Set environment variable: user_token = [copied token]

================================================================================
2. KYC SUBMISSION & APPROVAL
================================================================================

**IMPORTANT: Valid Document Types**
- `PAN` - PAN Card
- `AADHAAR` - Aadhaar Card  
- `PASSPORT` - Passport
- `DRIVING_LICENSE` - Driving License
- `VOTER_ID` - Voter ID

**IMPORTANT: Admin Actions Require 'action' Field**
- For approval: `"action": "approve"`
- For rejection: `"action": "reject"`
- Rejection also requires `"rejection_reason"` field

2.1 KYC Document Submission
----------------------------
Test Name: Submit KYC Document - Valid Data
API Endpoint: http://127.0.0.1:8000/api/v1/kyc/documents/upload/
HTTP Method: POST
Headers:
  Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU1MDA3MzIyLCJpYXQiOjE3NTUwMDM3MjIsImp0aSI6ImZkYzFjNDM4N2ZhNzQzNjA5NjBmMTkxZTY2MjY0NzBjIiwidXNlcl9pZCI6IjI1OTMwOWVmLTUxM2ItNGYxZi1iNmUxLWUxNzMxZTBmNDZiNiJ9.u5pd5ZgpRJLopn7nYdwcsbq0gCPr0RtbkGLW3GkTL5Y
  Content-Type: multipart/form-data

Request Body (form-data):
- document_type: PAN *(Note: Use exact values: PAN, AADHAAR, PASSPORT, DRIVING_LICENSE, VOTER_ID)*
- document_file: [upload a test image file]
- document_number: ABCDE1234F

Expected Response: 201 Created
{
  "id": "uuid-here",
  "document_type": "PAN",
  "document_number": "ABCDE1234F",
  "status": "PENDING",
  "submitted_at": "2024-01-15T10:30:00Z"
}

2.2 Admin KYC Approval
-----------------------
Test Name: Admin Approve KYC - Valid Document
API Endpoint: http://127.0.0.1:8000/api/v1/admin/kyc/{{kyc_document_id}}/approve/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "action": "approve",
  "notes": "Document verified successfully"
}

Expected Response: 200 OK
{
  "message": "KYC approved successfully",
  "kyc_document": {
    "id": "uuid-here",
    "status": "APPROVED",
    "verified_by": "admin",
    "verified_at": "2024-01-15T11:00:00Z"
  }
}

Test Name: Admin Reject KYC - Invalid Document
API Endpoint: http://127.0.0.1:8000/api/v1/admin/kyc/{{kyc_document_id}}/reject/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "action": "reject",
  "rejection_reason": "Document image is unclear"
}

Expected Response: 200 OK
{
  "message": "KYC rejected",
  "kyc_document": {
    "id": "uuid-here",
    "status": "REJECTED",
    "rejection_reason": "Document image is unclear"
  }
}

================================================================================
3. WALLET DEPOSIT & WITHDRAWALS
================================================================================

3.1 Wallet Balance Check
------------------------
Test Name: Get User Wallet Balances
API Endpoint: http://127.0.0.1:8000/api/v1/wallet/balance/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "inr_wallet": {
    "balance": "0.00",
    "status": "active",
    "is_active": true
  },
  "usdt_wallet": {
    "balance": "0.000000",
    "status": "active",
    "is_active": true
  }
}

3.2 INR Deposit Request
-----------------------
Test Name: Create INR Deposit Request
API Endpoint: http://127.0.0.1:8000/api/v1/deposit-requests/
HTTP Method: POST
Headers:
  Authorization: Bearer {{user_token}}
  Content-Type: application/json

Request Body:
{
  "currency": "INR",
  "amount": "5000.00",
  "payment_method": "bank_transfer",
  "payment_details": {
    "account_number": "1234567890",
    "ifsc_code": "SBIN0001234",
    "account_holder_name": "Test User",
    "bank_name": "State Bank of India"
  }
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "currency": "INR",
  "amount": "5000.00",
  "status": "PENDING",
  "payment_method": "bank_transfer",
  "created_at": "2024-01-15T12:00:00Z"
}

3.3 Admin Approve Deposit
-------------------------
Test Name: Admin Approve Deposit Request
API Endpoint: http://127.0.0.1:8000/api/v1/deposits/approve/{{deposit_id}}/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "transaction_reference": "TXN123456789",
  "notes": "Bank transfer confirmed"
}

Expected Response: 200 OK
{
  "message": "Deposit approved successfully",
  "deposit": {
    "id": "uuid-here",
    "status": "APPROVED",
    "processed_at": "2024-01-15T12:30:00Z"
  }
}

3.4 Verify Balance Update
-------------------------
Test Name: Check Updated Wallet Balance
API Endpoint: http://127.0.0.1:8000/api/v1/wallet/balance/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "inr_wallet": {
    "balance": "5000.00",
    "status": "active",
    "is_active": true
  },
  "usdt_wallet": {
    "balance": "0.000000",
    "status": "active",
    "is_active": true
  }
}

3.5 Create Withdrawal Request
-----------------------------
Test Name: Create INR Withdrawal Request
API Endpoint: http://127.0.0.1:8000/api/v1/withdraw/
HTTP Method: POST
Headers:
  Authorization: Bearer {{user_token}}
  Content-Type: application/json

Request Body:
{
  "currency": "INR",
  "amount": "1000.00",
  "payout_method": "bank_transfer",
  "payout_details": {
    "account_number": "1234567890",
    "ifsc_code": "SBIN0001234",
    "account_holder_name": "Test User",
    "bank_name": "State Bank of India"
  }
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "currency": "INR",
  "amount": "1000.00",
  "fee": "10.00",
  "net_amount": "990.00",
  "status": "PENDING"
}

3.6 Admin Approve Withdrawal
-----------------------------
Test Name: Admin Approve Withdrawal Request
API Endpoint: http://127.0.0.1:8000/api/v1/admin/withdrawals/{{withdrawal_id}}/approve/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "transaction_reference": "TXN987654321",
  "notes": "Bank transfer initiated"
}

Expected Response: 200 OK
{
  "message": "Withdrawal approved successfully",
  "withdrawal": {
    "id": "uuid-here",
    "status": "APPROVED",
    "processed_at": "2024-01-15T13:00:00Z"
  }
}

================================================================================
4. INVESTMENT PLAN PURCHASE & ROI CREDIT
================================================================================

4.1 View Available Investment Plans
-----------------------------------
Test Name: Get Investment Plans
API Endpoint: http://127.0.0.1:8000/api/v1/investment/investment-plans/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "count": 2,
  "results": [
    {
      "id": "uuid-here",
      "name": "Basic Plan",
      "roi_rate": "12.00",
      "frequency": "daily",
      "duration_days": 30,
      "min_amount": "1000.00",
      "max_amount": "100000.00",
      "status": "active"
    }
  ]
}

4.2 Purchase Investment Plan
----------------------------
Test Name: Purchase Investment Plan
API Endpoint: http://127.0.0.1:8000/api/v1/investment/investments/
HTTP Method: POST
Headers:
  Authorization: Bearer {{user_token}}
  Content-Type: application/json

Request Body:
{
  "plan": "{{plan_id}}",
  "amount": "2000.00",
  "currency": "inr"
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "plan": {
    "id": "uuid-here",
    "name": "Basic Plan",
    "roi_rate": "12.00"
  },
  "amount": "2000.00",
  "status": "ACTIVE",
  "start_date": "2024-01-15T14:00:00Z",
  "maturity_date": "2024-02-14T14:00:00Z"
}

4.3 Admin Trigger ROI Distribution
---------------------------------
Test Name: Admin Trigger ROI Distribution
API Endpoint: http://127.0.0.1:8000/api/v1/admin/investments/trigger-roi/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "date": "2024-01-16"
}

Expected Response: 200 OK
{
  "message": "ROI distribution triggered successfully",
  "processed_investments": 1,
  "total_roi_distributed": "2.40"
}

4.4 Verify ROI Credit
---------------------
Test Name: Check Updated Wallet Balance After ROI
API Endpoint: http://127.0.0.1:8000/api/v1/wallet/balance/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "inr_wallet": {
    "balance": "4002.40",
    "status": "active",
    "is_active": true
  },
  "usdt_wallet": {
    "balance": "0.000000",
    "status": "active",
    "is_active": true
  }
}

================================================================================
5. REFERRAL SYSTEM & EARNINGS
================================================================================

5.1 Get Referral Link
---------------------
Test Name: Get User Referral Profile
API Endpoint: http://127.0.0.1:8000/api/v1/referrals/profile/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "referral_code": "TESTUSER1",
  "referral_link": "http://localhost:8000/register?ref=TESTUSER1",
  "total_referrals": 0,
  "total_earnings": "0.00"
}

5.2 Register Referred User
--------------------------
Test Name: Register User with Referral Code
API Endpoint: http://127.0.0.1:8000/api/v1/auth/register/
HTTP Method: POST
Headers:
  Content-Type: application/json

Request Body:
{
  "username": "referreduser1",
  "email": "referreduser1@example.com",
  "password": "TestPass123!",
  "password_confirm": "TestPass123!",
  "first_name": "Referred",
  "last_name": "User",
  "phone_number": "+919876543211",
  "referral_code": "TESTUSER1"
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "username": "referreduser1",
  "email": "referreduser1@example.com",
  "referrer": "TESTUSER1"
}

5.3 Verify Referral Relationship
-------------------------------
Test Name: Get Referral Tree
API Endpoint: http://127.0.0.1:8000/api/v1/referrals/tree/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "referrer": null,
  "referrals": [
    {
      "id": "uuid-here",
      "username": "referreduser1",
      "email": "referreduser1@example.com",
      "joined_at": "2024-01-15T15:00:00Z"
    }
  ],
  "total_referrals": 1
}

5.4 Admin Create Referral Milestone
-----------------------------------
Test Name: Admin Create Referral Milestone
API Endpoint: http://127.0.0.1:8000/api/v1/admin/referrals/milestones/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "name": "First Referral Bonus",
  "description": "Bonus for first successful referral",
  "referral_count": 1,
  "bonus_amount": "100.00",
  "bonus_type": "FIXED",
  "is_active": true
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "name": "First Referral Bonus",
  "referral_count": 1,
  "bonus_amount": "100.00",
  "bonus_type": "FIXED"
}

================================================================================
6. TRANSACTIONS HISTORY & FILTERS
================================================================================

6.1 Get User Transaction History
--------------------------------
Test Name: Get User Transactions
API Endpoint: http://127.0.0.1:8000/api/v1/transactions/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "count": 4,
  "results": [
    {
      "id": "uuid-here",
      "transaction_type": "DEPOSIT",
      "currency": "INR",
      "amount": "5000.00",
      "balance_after": "5000.00",
      "created_at": "2024-01-15T12:30:00Z"
    }
  ]
}

6.2 Filter Transactions by Type
-------------------------------
Test Name: Filter Transactions by Type
API Endpoint: http://127.0.0.1:8000/api/v1/transactions/?transaction_type=DEPOSIT
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "count": 1,
  "results": [
    {
      "id": "uuid-here",
      "transaction_type": "DEPOSIT",
      "currency": "INR",
      "amount": "5000.00"
    }
  ]
}

6.3 Filter Transactions by Date Range
-------------------------------------
Test Name: Filter Transactions by Date Range
API Endpoint: http://127.0.0.1:8000/api/v1/transactions/?start_date=2024-01-15&end_date=2024-01-16
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "count": 4,
  "results": [
    // All transactions from Jan 15-16
  ]
}

================================================================================
7. ADMIN PANEL OPERATIONS
================================================================================

7.1 Admin Dashboard Summary
---------------------------
Test Name: Get Admin Dashboard Summary
API Endpoint: http://127.0.0.1:8000/api/v1/admin/dashboard/summary/
HTTP Method: GET
Headers:
  Authorization: Bearer {{admin_token}}

Expected Response: 200 OK
{
  "total_users": 3,
  "verified_users": 1,
  "pending_kyc_users": 2,
  "active_users": 3,
  "total_inr_balance": "4002.40",
  "total_usdt_balance": "0.000000",
  "active_investments": 1,
  "pending_withdrawals": 0,
  "today_transactions": 4
}

7.2 Admin User Management
-------------------------
Test Name: Get All Users (Admin)
API Endpoint: http://127.0.0.1:8000/api/v1/admin/users/
HTTP Method: GET
Headers:
  Authorization: Bearer {{admin_token}}

Expected Response: 200 OK
{
  "count": 3,
  "results": [
    {
      "id": "uuid-here",
      "username": "testuser1",
      "email": "testuser1@example.com",
      "is_kyc_verified": true,
      "kyc_status": "APPROVED"
    }
  ]
}

Test Name: Update User Details (Admin)
API Endpoint: http://127.0.0.1:8000/api/v1/admin/users/{{user_id}}/
HTTP Method: PATCH
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "first_name": "Updated Test",
  "phone_number": "+919876543212"
}

Expected Response: 200 OK
{
  "id": "uuid-here",
  "first_name": "Updated Test",
  "phone_number": "+919876543212"
}

7.3 Admin Wallet Management
---------------------------
Test Name: Admin Credit User Wallet
API Endpoint: http://127.0.0.1:8000/api/v1/admin/wallet/adjust_balance/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "user_id": "{{user_id}}",
  "action": "credit",
  "amount": "500.00",
  "wallet_type": "INR",
  "reason": "Bonus credit for testing"
}

Expected Response: 200 OK
{
  "message": "Wallet credited successfully",
  "new_balance": "4502.40"
}

Test Name: Admin Debit User Wallet
API Endpoint: http://127.0.0.1:8000/api/v1/admin/wallet/adjust_balance/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "user_id": "{{user_id}}",
  "action": "debit",
  "amount": "100.00",
  "wallet_type": "INR",
  "reason": "Service fee adjustment"
}

Expected Response: 200 OK
{
  "message": "Wallet debited successfully",
  "new_balance": "4402.40"
}

7.4 Admin Investment Management
-------------------------------
Test Name: Create Investment Plan (Admin)
API Endpoint: http://127.0.0.1:8000/api/v1/admin/investment-plans/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "name": "Premium Plan",
  "roi_rate": "18.00",
  "frequency": "daily",
  "duration_days": 60,
  "min_amount": "5000.00",
  "max_amount": "500000.00",
  "breakdown_window_days": 30,
  "status": "active"
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "name": "Premium Plan",
  "roi_rate": "18.00",
  "duration_days": 60
}

7.5 Admin Announcements
-----------------------
Test Name: Create System Announcement (Admin)
API Endpoint: http://127.0.0.1:8000/api/v1/admin/announcements/
HTTP Method: POST
Headers:
  Authorization: Bearer {{admin_token}}
  Content-Type: application/json

Request Body:
{
  "title": "System Maintenance Notice",
  "message": "Scheduled maintenance on January 20th from 2-4 AM",
  "target_group": "ALL"
}

Expected Response: 201 Created
{
  "id": "uuid-here",
  "title": "System Maintenance Notice",
  "message": "System maintenance on January 20th from 2-4 AM",
  "target_group": "ALL"
}

Test Name: Get User Announcements
API Endpoint: http://127.0.0.1:8000/api/v1/admin/announcements/user/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 200 OK
{
  "count": 1,
  "results": [
    {
      "id": "uuid-here",
      "title": "System Maintenance Notice",
      "message": "System maintenance on January 20th from 2-4 AM",
      "created_at": "2024-01-15T16:00:00Z"
    }
  ]
}

================================================================================
8. NEGATIVE TESTING SCENARIOS
================================================================================

8.1 Authentication Errors
-------------------------
Test Name: Access Protected Endpoint Without Token
API Endpoint: http://127.0.0.1:8000/api/v1/wallet/balance/
HTTP Method: GET
Headers: (none)

Expected Response: 401 Unauthorized
{
  "detail": "Authentication credentials were not provided."
}

Test Name: Access Admin Endpoint with User Token
API Endpoint: http://127.0.0.1:8000/api/v1/admin/dashboard/summary/
HTTP Method: GET
Headers:
  Authorization: Bearer {{user_token}}

Expected Response: 403 Forbidden
{
  "detail": "You do not have permission to perform this action."
}

8.2 Validation Errors
---------------------
Test Name: Register User with Invalid Email
API Endpoint: http://127.0.0.1:8000/api/v1/auth/register/
HTTP Method: POST
Headers:
  Content-Type: application/json

Request Body:
{
  "username": "testuser2",
  "email": "invalid-email",
  "password": "TestPass123!",
  "password_confirm": "TestPass123!"
}

Expected Response: 400 Bad Request
{
  "email": ["Enter a valid email address."]
}

Test Name: Create Deposit with Insufficient Details
API Endpoint: http://127.0.0.1:8000/api/v1/deposit-requests/
HTTP Method: POST
Headers:
  Authorization: Bearer {{user_token}}
  Content-Type: application/json

Request Body:
{
  "currency": "INR",
  "amount": "1000.00"
}

Expected Response: 400 Bad Request
{
  "payment_method": ["This field is required."],
  "payment_details": ["This field is required."]
}

8.3 Business Logic Errors
-------------------------
Test Name: Withdraw More Than Balance
API Endpoint: http://127.0.0.1:8000/api/v1/withdraw/
HTTP Method: POST
Headers:
  Authorization: Bearer {{user_token}}
  Content-Type: application/json

Request Body:
{
  "currency": "INR",
  "amount": "10000.00",
  "payout_method": "bank_transfer",
  "payout_details": {
    "account_number": "1234567890",
    "ifsc_code": "SBIN0001234"
  }
}

Expected Response: 400 Bad Request
{
  "amount": ["Insufficient balance for withdrawal."]
}

Test Name: Purchase Investment with Insufficient Balance
API Endpoint: http://127.0.0.1:8000/api/v1/investment/investments/
HTTP Method: POST
Headers:
  Authorization: Bearer {{user_token}}
  Content-Type: application/json

Request Body:
{
  "plan_id": "{{plan_id}}",
  "amount": "10000.00"
}

Expected Response: 400 Bad Request
{
  "amount": ["Insufficient balance for investment."]
}

================================================================================
9. TEST EXECUTION CHECKLIST
================================================================================

Before running tests:
□ Django server is running
□ Database is migrated and has initial data
□ Admin user account exists
□ Postman environment variables are set up

Test execution order:
□ Setup & Authentication
□ User Registration & Login
□ KYC Submission & Approval
□ Wallet Deposit & Withdrawals
□ Investment Plan Purchase & ROI Credit
□ Referral System & Earnings
□ Transactions History & Filters
□ Admin Panel Operations
□ Negative Testing Scenarios

Verification points:
□ All positive test cases return expected responses
□ Database state changes correctly after each operation
□ Error responses match expected format
□ Authentication and permissions work correctly
□ Business logic validations function properly

================================================================================
10. TROUBLESHOOTING
================================================================================

Common Issues:
1. 500 Internal Server Error: Check Django server logs
2. 404 Not Found: Verify API endpoint URLs
3. 401 Unauthorized: Check token validity and expiration
4. 403 Forbidden: Verify user permissions
5. 400 Bad Request: Check request body format and validation

Debug Steps:
1. Check Django server console for error messages
2. Verify database migrations are applied
3. Check user permissions and roles
4. Validate request/response format
5. Test with Django admin interface

================================================================================
END OF MANUAL API TESTING GUIDE
================================================================================

This guide covers all major features of the Investment & Wallet Management System.
Run through each section systematically to verify end-to-end functionality.
Keep this guide updated as new features are added or APIs change.
